@charset "UTF-8";
/*! tailwindcss v2.2.4 | MIT License | https://tailwindcss.com */
/*! modern-normalize v1.1.0 | MIT License | https://github.com/sindresorhus/modern-normalize */
/*
Document
========
*/
/**
Use a better box model (opinionated).
*/
*,
::before,
::after {
	box-sizing: border-box;
}
/**
Use a more readable tab size (opinionated).
*/
html {
	-moz-tab-size: 4;
	tab-size: 4;
}
/**
1. Correct the line height in all browsers.
2. Prevent adjustments of font size after orientation changes in iOS.
*/
html {
	line-height: 1.15; /* 1 */
	-webkit-text-size-adjust: 100%; /* 2 */
}
/*
Sections
========
*/
/**
Remove the margin in all browsers.
*/
body {
	margin: 0;
}
/**
Improve consistency of default fonts in all browsers. (https://github.com/sindresorhus/modern-normalize/issues/3)
*/
body {
	font-family:
		system-ui,
		-apple-system, /* Firefox supports this but not yet `system-ui` */
		'Segoe UI',
		Roboto,
		Helvetica,
		Arial,
		sans-serif,
		'Apple Color Emoji',
		'Segoe UI Emoji';
}
/*
Grouping content
================
*/
/**
1. Add the correct height in Firefox.
2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)
*/
hr {
	height: 0; /* 1 */
	color: inherit; /* 2 */
}
/*
Text-level semantics
====================
*/
/**
Add the correct text decoration in Chrome, Edge, and Safari.
*/
abbr[title] {
	text-decoration: underline dotted;
}
/**
Add the correct font weight in Edge and Safari.
*/
b,
strong {
	font-weight: bolder;
}
/**
1. Improve consistency of default fonts in all browsers. (https://github.com/sindresorhus/modern-normalize/issues/3)
2. Correct the odd 'em' font sizing in all browsers.
*/
code,
kbd,
samp,
pre {
	font-family:
		ui-monospace,
		SFMono-Regular,
		Consolas,
		'Liberation Mono',
		Menlo,
		monospace; /* 1 */
	font-size: 1em; /* 2 */
}
/**
Add the correct font size in all browsers.
*/
small {
	font-size: 80%;
}
/**
Prevent 'sub' and 'sup' elements from affecting the line height in all browsers.
*/
sub,
sup {
	font-size: 75%;
	line-height: 0;
	position: relative;
	vertical-align: baseline;
}
sub {
	bottom: -0.25em;
}
sup {
	top: -0.5em;
}
/*
Tabular data
============
*/
/**
1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)
2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)
*/
table {
	text-indent: 0; /* 1 */
	border-color: inherit; /* 2 */
}
/*
Forms
=====
*/
/**
1. Change the font styles in all browsers.
2. Remove the margin in Firefox and Safari.
*/
button,
input,
optgroup,
select,
textarea {
	font-family: inherit; /* 1 */
	font-size: 100%; /* 1 */
	line-height: 1.15; /* 1 */
	margin: 0; /* 2 */
}
/**
Remove the inheritance of text transform in Edge and Firefox.
1. Remove the inheritance of text transform in Firefox.
*/
button,
select { /* 1 */
	text-transform: none;
}
/**
Correct the inability to style clickable types in iOS and Safari.
*/
button,
[type='button'],
[type='reset'],
[type='submit'] {
	-webkit-appearance: button;
}
/**
Remove the inner border and padding in Firefox.
*/
::-moz-focus-inner {
	border-style: none;
	padding: 0;
}
/**
Restore the focus styles unset by the previous rule.
*/
:-moz-focusring {
	outline: 1px dotted ButtonText;
}
/**
Remove the additional ':invalid' styles in Firefox.
See: https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737
*/
:-moz-ui-invalid {
	box-shadow: none;
}
/**
Remove the padding so developers are not caught out when they zero out 'fieldset' elements in all browsers.
*/
legend {
	padding: 0;
}
/**
Add the correct vertical alignment in Chrome and Firefox.
*/
progress {
	vertical-align: baseline;
}
/**
Correct the cursor style of increment and decrement buttons in Safari.
*/
::-webkit-inner-spin-button,
::-webkit-outer-spin-button {
	height: auto;
}
/**
1. Correct the odd appearance in Chrome and Safari.
2. Correct the outline style in Safari.
*/
[type='search'] {
	-webkit-appearance: textfield; /* 1 */
	outline-offset: -2px; /* 2 */
}
/**
Remove the inner padding in Chrome and Safari on macOS.
*/
::-webkit-search-decoration {
	-webkit-appearance: none;
}
/**
1. Correct the inability to style clickable types in iOS and Safari.
2. Change font properties to 'inherit' in Safari.
*/
::-webkit-file-upload-button {
	-webkit-appearance: button; /* 1 */
	font: inherit; /* 2 */
}
/*
Interactive
===========
*/
/*
Add the correct display in Chrome and Safari.
*/
summary {
	display: list-item;
}
/**
 * Manually forked from SUIT CSS Base: https://github.com/suitcss/base
 * A thin layer on top of normalize.css that provides a starting point more
 * suitable for web applications.
 */
/**
 * Removes the default spacing and border for appropriate elements.
 */
blockquote,
dl,
dd,
h1,
h2,
h3,
h4,
h5,
h6,
hr,
figure,
p,
pre {
  margin: 0;
}
button {
  background-color: transparent;
  background-image: none;
}
fieldset {
  margin: 0;
  padding: 0;
}
ol,
ul {
  list-style: none;
  margin: 0;
  padding: 0;
}
/**
 * Tailwind custom reset styles
 */
/**
 * 1. Use the user's configured `sans` font-family (with Tailwind's default
 *    sans-serif font stack as a fallback) as a sane default.
 * 2. Use Tailwind's default "normal" line-height so the user isn't forced
 *    to override it to ensure consistency even when using the default theme.
 */
html {
  font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji"; /* 1 */
  line-height: 1.5; /* 2 */
}
/**
 * Inherit font-family and line-height from `html` so users can set them as
 * a class directly on the `html` element.
 */
body {
  font-family: inherit;
  line-height: inherit;
}
/**
 * 1. Prevent padding and border from affecting element width.
 *
 *    We used to set this in the html element and inherit from
 *    the parent element for everything else. This caused issues
 *    in shadow-dom-enhanced elements like <details> where the content
 *    is wrapped by a div with box-sizing set to `content-box`.
 *
 *    https://github.com/mozdevs/cssremedy/issues/4
 *
 *
 * 2. Allow adding a border to an element by just adding a border-width.
 *
 *    By default, the way the browser specifies that an element should have no
 *    border is by setting it's border-style to `none` in the user-agent
 *    stylesheet.
 *
 *    In order to easily add borders to elements by just setting the `border-width`
 *    property, we change the default border-style for all elements to `solid`, and
 *    use border-width to hide them instead. This way our `border` utilities only
 *    need to set the `border-width` property instead of the entire `border`
 *    shorthand, making our border utilities much more straightforward to compose.
 *
 *    https://github.com/tailwindcss/tailwindcss/pull/116
 */
*,
::before,
::after {
  box-sizing: border-box; /* 1 */
  border-width: 0; /* 2 */
  border-style: solid; /* 2 */
  border-color: currentColor; /* 2 */
}
/*
 * Ensure horizontal rules are visible by default
 */
hr {
  border-top-width: 1px;
}
/**
 * Undo the `border-style: none` reset that Normalize applies to images so that
 * our `border-{width}` utilities have the expected effect.
 *
 * The Normalize reset is unnecessary for us since we default the border-width
 * to 0 on all elements.
 *
 * https://github.com/tailwindcss/tailwindcss/issues/362
 */
img {
  border-style: solid;
}
textarea {
  resize: vertical;
}
input::placeholder,
textarea::placeholder {
  opacity: 1;
  color: #9ca3af;
}
button,
[role="button"] {
  cursor: pointer;
}
table {
  border-collapse: collapse;
}
h1,
h2,
h3,
h4,
h5,
h6 {
  font-size: inherit;
  font-weight: inherit;
}
/**
 * Reset links to optimize for opt-in styling instead of
 * opt-out.
 */
a {
  color: inherit;
  text-decoration: inherit;
}
/**
 * Reset form element properties that are easy to forget to
 * style explicitly so you don't inadvertently introduce
 * styles that deviate from your design system. These styles
 * supplement a partial reset that is already applied by
 * normalize.css.
 */
button,
input,
optgroup,
select,
textarea {
  padding: 0;
  line-height: inherit;
  color: inherit;
}
/**
 * Use the configured 'mono' font family for elements that
 * are expected to be rendered with a monospace font, falling
 * back to the system monospace stack if there is no configured
 * 'mono' font family.
 */
pre,
code,
kbd,
samp {
  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
}
/**
 * 1. Make replaced elements `display: block` by default as that's
 *    the behavior you want almost all of the time. Inspired by
 *    CSS Remedy, with `svg` added as well.
 *
 *    https://github.com/mozdevs/cssremedy/issues/14
 * 
 * 2. Add `vertical-align: middle` to align replaced elements more
 *    sensibly by default when overriding `display` by adding a
 *    utility like `inline`.
 *
 *    This can trigger a poorly considered linting error in some
 *    tools but is included by design.
 * 
 *    https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210
 */
img,
svg,
video,
canvas,
audio,
iframe,
embed,
object {
  display: block; /* 1 */
  vertical-align: middle; /* 2 */
}
/**
 * Constrain images and videos to the parent width and preserve
 * their intrinsic aspect ratio.
 *
 * https://github.com/mozdevs/cssremedy/issues/14
 */
img,
video {
  max-width: 100%;
  height: auto;
}
*, ::before, ::after{
	--tw-translate-x: 0;
	--tw-translate-y: 0;
	--tw-rotate: 0;
	--tw-skew-x: 0;
	--tw-skew-y: 0;
	--tw-scale-x: 1;
	--tw-scale-y: 1;
	--tw-transform: translateX(var(--tw-translate-x)) translateY(var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
	--tw-border-opacity: 1;
	border-color: rgba(229, 231, 235, var(--tw-border-opacity));
	--tw-shadow: 0 0 #0000;
	--tw-ring-inset: var(--tw-empty,/*!*/ /*!*/);
	--tw-ring-offset-width: 0px;
	--tw-ring-offset-color: #fff;
	--tw-ring-color: rgba(59, 130, 246, 0.5);
	--tw-ring-offset-shadow: 0 0 #0000;
	--tw-ring-shadow: 0 0 #0000;
	--tw-blur: var(--tw-empty,/*!*/ /*!*/);
	--tw-brightness: var(--tw-empty,/*!*/ /*!*/);
	--tw-contrast: var(--tw-empty,/*!*/ /*!*/);
	--tw-grayscale: var(--tw-empty,/*!*/ /*!*/);
	--tw-hue-rotate: var(--tw-empty,/*!*/ /*!*/);
	--tw-invert: var(--tw-empty,/*!*/ /*!*/);
	--tw-saturate: var(--tw-empty,/*!*/ /*!*/);
	--tw-sepia: var(--tw-empty,/*!*/ /*!*/);
	--tw-drop-shadow: var(--tw-empty,/*!*/ /*!*/);
	--tw-filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);
	--tw-backdrop-blur: var(--tw-empty,/*!*/ /*!*/);
	--tw-backdrop-brightness: var(--tw-empty,/*!*/ /*!*/);
	--tw-backdrop-contrast: var(--tw-empty,/*!*/ /*!*/);
	--tw-backdrop-grayscale: var(--tw-empty,/*!*/ /*!*/);
	--tw-backdrop-hue-rotate: var(--tw-empty,/*!*/ /*!*/);
	--tw-backdrop-invert: var(--tw-empty,/*!*/ /*!*/);
	--tw-backdrop-opacity: var(--tw-empty,/*!*/ /*!*/);
	--tw-backdrop-saturate: var(--tw-empty,/*!*/ /*!*/);
	--tw-backdrop-sepia: var(--tw-empty,/*!*/ /*!*/);
	--tw-backdrop-filter: var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);
}
.container{
	width: 100%;
	margin-right: auto;
	margin-left: auto;
	padding-right: 4vw;
	padding-left: 4vw;
}
@media (min-width: 640px){
	.container{
		max-width: 640px;
	}
}
@media (min-width: 768px){
	.container{
		max-width: 768px;
	}
}
@media (min-width: 1024px){
	.container{
		max-width: 1024px;
	}
}
@media (min-width: 1280px){
	.container{
		max-width: 1280px;
	}
}
@media (min-width: 1536px){
	.container{
		max-width: 1536px;
	}
}
.static{
	position: static;
}
.block{
	display: block;
}
.flex{
	display: flex;
}
.hidden{
	display: none;
}
.h-6{
	height: 1.5rem;
}
.w-full{
	width: 100%;
}
.w-6{
	width: 1.5rem;
}
.w-2\/3{
	width: 66.666667%;
}
.w-1\/3{
	width: 33.333333%;
}
.flex-col{
	flex-direction: column;
}
.flex-wrap{
	flex-wrap: wrap;
}
.items-center{
	align-items: center;
}
.justify-between{
	justify-content: space-between;
}
.rounded-sm{
	border-radius: 0.125rem;
}
.border{
	border-width: 1px;
}
.border-solid{
	border-style: solid;
}
.border-white{
	--tw-border-opacity: 1;
	border-color: rgba(255, 255, 255, var(--tw-border-opacity));
}
.bg-primary{
	--tw-bg-opacity: 1;
	background-color: rgba(52, 144, 220, var(--tw-bg-opacity));
}
.py-3{
	padding-top: 0.75rem;
	padding-bottom: 0.75rem;
}
.px-2{
	padding-left: 0.5rem;
	padding-right: 0.5rem;
}
.py-1{
	padding-top: 0.25rem;
	padding-bottom: 0.25rem;
}
.font-medium{
	font-weight: 500;
}
.uppercase{
	text-transform: uppercase;
}
.text-white{
	--tw-text-opacity: 1;
	color: rgba(255, 255, 255, var(--tw-text-opacity));
}
.text-primary{
	--tw-text-opacity: 1;
	color: rgba(78, 78, 78, var(--tw-text-opacity));
}
.text-heading{
	--tw-text-opacity: 1;
	color: rgba(0, 0, 0, var(--tw-text-opacity));
}
.ps-4vw{
	padding-inline-start: 4vw;
}
@keyframes fadeOut {
  0% {
    opacity: 1;
  }
  95% {
    opacity: 0;
  }
  100% {
    z-index: -5;
    display: none;
    opacity: 0;
  }
}
@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}
@keyframes slideInUp {
  from {
    transform: translate3d(0, 30px, 0);
    opacity: 0;
  }
  to {
    transform: translate3d(0, 0, 0);
    opacity: 1;
  }
}
@keyframes slideOutDown {
  from {
    transform: translate3d(0, 0, 0);
  }
  to {
    transform: translate3d(0, 30px, 0);
  }
}
@keyframes navSlideUp {
  from {
    transform: translate3d(0, 0, 0);
  }
  to {
    transform: translate3d(0, -200px, 0);
  }
}
@keyframes navSlideDown {
  from {
    transform: translate3d(0, -200px, 0);
  }
  to {
    transform: translate3d(0, 0, 0);
  }
}
@keyframes ripple {
  from {
    opacity: 1;
    transform: scale3d(0.75, 0.75, 1);
  }
  to {
    opacity: 0;
    transform: scale3d(1.5, 1.5, 1);
  }
}
@keyframes slideIn {
  0% {
    bottom: -50%;
    opacity: 0;
  }
  50% {
    bottom: -50%;
    opacity: 0;
  }
  to {
    opacity: 1;
    bottom: 5%;
  }
}
@keyframes slideOut {
  0% {
    bottom: 5%;
    opacity: 1;
  }
  50% {
    bottom: -50%;
    opacity: 0.5;
  }
  100% {
    bottom: -50%;
    opacity: 0;
  }
}
.navbar .has-megamenu {
  position: static !important;
}
.navbar .has-megamenu .active {
  background-color: white !important;
}

.navbar .has-megamenu .sub-menu {
  left: 0;
  right: 0;
  width: 100%;
  padding: 20px;
  flex-flow: row wrap;
}
.navbar .has-megamenu .sub-menu .sub-menu {
  position: static !important;
  display: flex !important;
  flex-flow: column;
}
.navbar .has-megamenu .sub-menu .megamenu {
  width: fit-content;
  display: inline-flex;
  flex-flow: column;
  margin-left: 30px;
}
.navbar .has-megamenu .sub-menu .megamenu > .dropdown-item {
  font-weight: 600;
}
.navbar .has-megamenu .sub-menu .megamenu .sub-menu {
  box-shadow: none;
  border: none;
  background-color: transparent;
  padding: 0;
  margin-top: 5px;
}
.navbar .has-megamenu .sub-menu .megamenu .sub-menu .nav-item {
  padding: 0;
}

.dropdown-toggle {
  cursor: pointer;
}

.desktop-menu .sub-menu {
  position: absolute;
  right: 50%;
  transform: translateX(50%);
  background-color: white;
  position: absolute;
  min-width: 260px;
  z-index: 1;
  list-style: none;
  padding: 0;
  color: #4e4e4e;
  display: none;
  border-radius: 5px;
  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.08);
}
.desktop-menu .sub-menu::after {
  width: 0;
  height: 0;
  border-left: 5px solid transparent;
  border-right: 5px solid transparent;
  border-bottom: 5px solid white;
  content: "";
  position: absolute;
  right: 50%;
  transform: translateX(50%);
  top: -5px;
}
.desktop-menu .sub-menu .dropdown::after {
  top: 10px;
  content: "+";
}
.desktop-menu .sub-menu .menu-item {
  margin: 0 !important;
  display: flex;
  padding: 10px;
  justify-content: flex-start;
  align-items: center;
}
.desktop-menu .sub-menu .menu-item img {
  max-height: 50px;
  max-width: 30px;
  margin-left: 10px;
  margin-right: 15px;
}
.desktop-menu .sub-menu .menu-item:first-of-type {
  border-top-left-radius: 5px;
  border-top-right-radius: 5px;
}
.desktop-menu .sub-menu .menu-item:last-of-type {
  border-bottom-left-radius: 5px;
  border-bottom-right-radius: 5px;
}
.desktop-menu .sub-menu .menu-item:hover, .desktop-menu .sub-menu .menu-item:focus, .desktop-menu .sub-menu .menu-item:active {
  background-color: #f1f1f1;
}
.desktop-menu .sub-menu .sub-menu {
  right: 160px;
  top: 0;
  box-shadow: none;
}
.desktop-menu .sub-menu .sub-menu::after {
  top: 0;
  z-index: -1;
}
.desktop-menu .sub-menu a {
  padding: 12px 16px;
  text-decoration: none;
  display: block;
}
.desktop-menu .menu-item-has-children {
  position: relative;
  display: inline-block;
  padding-left: 15px;
}
.desktop-menu .menu-item-has-children::after {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  left: 5px;
  content: "+";
  color: #ffed4a;
}
.desktop-menu .menu-item-has-children .menu-item-has-children {
  width: 100%;
}
.desktop-menu .menu-item-has-children:hover > .sub-menu, .desktop-menu .menu-item-has-children:focus > .sub-menu, .desktop-menu .menu-item-has-children:active > .sub-menu {
  display: block;
  animation-name: slideDown;
  animation-duration: 0.5s;
  animation-fill-mode: forwards;
}
.desktop-menu .menu-item-has-children:hover::after, .desktop-menu .menu-item-has-children:focus::after, .desktop-menu .menu-item-has-children:active::after {
  content: "-";
}

@keyframes slideDown {
  0% {
    display: block;
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}
.sidenav {
  height: 100%;
  width: 0;
  position: fixed;
  z-index: 5;
  top: 0;
  right: 0;
  background-color: #3c4b54;
  overflow-x: hidden;
  transition: 0.5s;
}
.sidenav .sidebar-header {
  background-color: #3490dc;
  position: relative;
  padding: 15px 40px;
  display: flex;
  justify-content: space-between;
  align-items: center;
}
.sidenav .sidebar-header .title {
  color: white;
  white-space: nowrap;
  margin: 0;
  font-size: 1.6rem;
}
.sidenav .sidebar-header .closebtn {
  font-size: 36px;
  color: white;
}
.sidenav .sidebar-header .closebtn:hover, .sidenav .sidebar-header .closebtn:focus, .sidenav .sidebar-header .closebtn:active {
  text-decoration: none;
}
.sidenav ul {
  padding-right: 0;
  list-style: none;
}
.sidenav ul li {
  overflow: hidden;
  padding: 0;
  position: relative;
}
.sidenav ul li.menu-icon {
  display: grid;
  grid-template-columns: 70px auto;
  grid-auto-flow: column dense;
}
.sidenav ul li.menu-icon img {
  max-width: 30px;
  max-height: 30px;
  align-self: center;
  justify-self: flex-start;
  margin-right: 40px;
}
.sidenav ul li.menu-icon a {
  padding-right: 10px;
  align-self: center;
  justify-self: flex-start;
}
.sidenav ul li.menu-item-has-children::after {
  position: absolute;
  top: 10px;
  color: white;
  transform: none;
  font-size: 1.7rem;
  content: "+";
  left: 40px;
}
.sidenav ul li.menu-item-has-children.child-menu-opened::after {
  content: "-";
}
.sidenav ul li a {
  display: inline-block;
  white-space: nowrap;
  color: white;
  font-weight: 500;
  padding-top: 15px;
  padding-bottom: 15px;
  padding-right: 40px;
}
.sidenav ul.sub-menu {
  transition: all 0.5s;
  overflow: hidden;
  max-height: 0;
  background-color: #37454e;
  position: relative;
}
.sidenav ul.sub-menu.opened::after {
  position: absolute;
  width: 5px;
  height: 100%;
  content: "";
  background-color: white;
  right: 0;
  top: 0;
}

html,
body {
  direction: rtl;
}
html *,
html *::before,
html *::after,
body *,
body *::before,
body *::after {
  box-sizing: border-box;
}

body.out {
  animation-duration: 0.5s;
  animation-fill-mode: both;
  animation-name: slideOutDown;
}

a {
  text-decoration: none;
  color: inherit;
}
a:focus {
  outline: none;
}

section {
  padding: 50px 0;
  background-color: #ffffff;
  position: relative;
  box-sizing: border-box;
}

.spacer {
  flex: 1 1 auto;
}

.vail {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: black;
  opacity: 0.4;
  z-index: 1;
}

.shadow-vail {
  box-shadow: 0px 0px 1px 100vmax rgba(0, 0, 0, 0.8) !important;
}

.bg-image {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  object-fit: cover;
  height: 100%;
  width: 100%;
}

.bg-container {
  position: relative;
  overflow: hidden;
}

.bold {
  font-weight: bold;
  letter-spacing: 1px;
}

.white {
  color: white;
}

.img-container {
  position: relative;
}

.clickable-image {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: transparent;
  z-index: 10;
}

.sidebar__inner {
  position: sticky;
  top: 90px;
}

.slick-slide:focus {
  outline: none;
}

div.pagination {
  margin: 30px 0;
}
div.pagination .page-numbers {
  font-size: 1rem;
  padding: 0.5rem 1rem;
  transition: all 0.3s;
}
div.pagination .page-numbers.current {
  color: white;
  background-color: #3490dc;
  border-radius: 100px;
}
div.pagination .page-numbers.next {
  border: 2px solid lightgray;
  border-radius: 20px;
}
div.pagination .page-numbers.next i {
  margin-right: 10px;
  font-size: 0.9rem;
}
div.pagination .page-numbers.next i::before {
  content: "";
}
div.pagination .page-numbers.prev {
  border: 2px solid lightgray;
  border-radius: 20px;
}
div.pagination .page-numbers.prev i {
  margin-left: 10px;
  font-size: 0.9rem;
}
div.pagination .page-numbers.prev i::before {
  content: "";
}
div.pagination .page-numbers:hover {
  text-decoration: none;
  border-color: #3490dc;
}

.slick-prev,
.slick-next {
  z-index: 10;
}

@media (min-width: 1024px){
	.lg\:flex{
		display: flex;
	}
	.lg\:hidden{
		display: none;
	}
	.lg\:flex-row{
		flex-direction: row;
	}
	.lg\:justify-end{
		justify-content: flex-end;
	}
	.lg\:ps-0{
		padding-inline-start: 0px;
	}
	.lg\:me-5{
		margin-inline-end: 1.25rem;
	}
}


/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
